package edu.ncsu.csc326.coffeemaker;

import edu.ncsu.csc326.coffeemaker.exceptions.InventoryException;
import edu.ncsu.csc326.coffeemaker.exceptions.RecipeException;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

import java.lang.reflect.Method;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class AssignmentTests {
	private CoffeeMaker cm;
	private Recipe r1;
	private Recipe r2;
	private Recipe r3;
	private Recipe r4;

	@BeforeEach
	public void setUp() throws Exception {
		cm = new CoffeeMaker();
		// Set up for r1
		r1 = new Recipe();
		r1.setName("Coffee");
		r1.setAmtChocolate("0");
		r1.setAmtCoffee("3");
		r1.setAmtMilk("1");
		r1.setAmtSugar("1");
		r1.setPrice("10");

		// Set up for r2
		r2 = new Recipe();
		r2.setName("Mocha");
		r2.setAmtChocolate("20");
		r2.setAmtCoffee("3");
		r2.setAmtMilk("1");
		r2.setAmtSugar("1");
		r2.setPrice("75");

		// too big setup
		r3 = new Recipe();
		r3.setName("BigCoffee");
		r3.setAmtChocolate("1000000");
		r3.setAmtCoffee("3");
		r3.setAmtMilk("1");
		r3.setAmtSugar("1");
		r3.setPrice("75");

		// too big setup
		/*r4 = new Recipe();
		r4.setName("Cappucino");
		try {
		r4.setAmtChocolate("f");a
		} catch {
			
		}
		r4.setAmtCoffee("3");
		r4.setAmtMilk("1");
		r4.setAmtSugar("1");
		r4.setPrice("75");
		*/

	}

	@Test
	public void testAddNewRecipeWithAllParameters() {
		cm.addRecipe(r1); // Coffee, Milk, Sugar, Chocolate
		Recipe recipes[] = cm.getRecipes();
		assertEquals(r1, recipes[0]);
	}

	@Test
	public void testAddNewRecipeWithExistingName() {
		cm.addRecipe(r1);
		cm.addRecipe(r1);
		Recipe recipes[] = cm.getRecipes();
		assertEquals(1, recipes.length);
	}

	@Test
	public void RecipeExceptionThrown_thenExpectationSatisfied() {
		Recipe r4 = new Recipe();
		r4.setName("GoodOleJoe");
		Exception exception = assertThrows(RecipeException.class, () -> {
			r4.setAmtChocolate("");
			r4.setAmtCoffee("3");
			r4.setAmtMilk("1");
			r4.setAmtSugar("1");
			r4.setPrice("75");
		});
		String expectedMessage = "must be a positive integer";
		String actualMessage = exception.getMessage();
		assertTrue(actualMessage.contains(expectedMessage));
	}

	@Test
	public void testAddNewRecipeWithLargeNumbers() { // this shouldn't be added, so the assert should change
		cm.addRecipe(r3);
		int choc = cm.getRecipes()[0].getAmtChocolate();
		assertEquals("1000000", choc);
	}

	@Test
	public void testDeleteRecipe() {
		cm.addRecipe(r1);
		String deleted = cm.deleteRecipe(0);
		assertEquals("Mocha", deleted);
	}

	@Test
	public void testDeleteRecipeThatDoesntExist() {
		cm.addRecipe(r1);
		cm.deleteRecipe(0);
		//delete recipe returns null if there is nothing at that index
		assertEquals(null, cm.deleteRecipe(0));
	}

	@Test
	public void testDeleteAndTryPurchase() {
		cm.addRecipe(r1);
		cm.deleteRecipe(0);
		int money = cm.makeCoffee(1, 10); // here the 'change' is returned
		assertEquals(10, money); // here there should be as much money as the user put in, because the purchase should fail
	}

	@Test
	public void testShouldFailEditRecipeUsingTextInput() {
		cm.addRecipe(r1); // Returns the name of the successfully edited recipe or null if the recipe cannot be edited.
		 assertThrows(InventoryException.class, () -> {
				r1.setAmtChocolate("f"); // 
		});
	}

// public synchronized String editRecipe(int recipeToEdit, Recipe newRecipe) {
// 		if (recipeArray[recipeToEdit] != null) { it's not null though. cause it exists.It fails at the object creation
// 			String recipeName = recipeArray[recipeToEdit].getName(); // it gets the name before the change
// 			newRecipe.setName(""); // i mean the name is gonna be empty no natter what,...ok - null? XD
// 			recipeArray[recipeToEdit] = newRecipe;
// 			return recipeName;
// 		} else {
// 			return null;
// 		}
// 	}


	@Test
	public void testEditRecipeWithCorrectInput() {
		cm.addRecipe(r1);
		String oldRecipe = cm.editRecipe(0, r2);
		assertEquals("Coffee", oldRecipe);
	}

	@Test // Sugar and chocolate is not added
	public void testInventoryIsUpdatedAfterUpdate() {
		try {
			cm.addInventory("1", "1", "1", "1");
			String inventory = cm.checkInventory();
		} catch (InventoryException e) {
			fail(" ");
		}
	}

	@Test
	public void testInventoryIsUpdatedAfterPurchase() {
		cm.addRecipe(r1);
		String startInv = cm.checkInventory();
		cm.makeCoffee(0, 10);
		String currentInv = cm.checkInventory();
		assertFalse(startInv.equals(currentInv));
	}

	@Test
	public void testAddLargeAmountsToInventoryShouldFail() {
		String currentInv = cm.checkInventory();
		try {
			cm.addInventory("1000000", "1000000", "1000000", "100000");
		} catch (Exception e) {
			fail("No exception should be thrown");
		}
		String inventory = cm.checkInventory();
		assertEquals(currentInv, inventory);
	}


//there is an exception available for inventory on non-positive numbers
	@Test
	public void testAddNegativeAmountsToInventory() {
		 assertThrows(InventoryException.class, () -> {
				cm.addInventory("-5", "0", "0", "0"); // testInventoryAdded NOOOOOOOO it is exactly what it says
		});
	}

	@Test
	public void addFailedRecipeThenPurchase() {
		Recipe r = new Recipe();
		int money = 0;
		try {
			r.setAmtChocolate("not number");
			r.setAmtCoffee("not number");
			r.setAmtMilk("not number");
			r.setAmtSugar("not number");
			r.setPrice("not number");
			cm.addRecipe(r);
		} catch (RecipeException e) {
			money = cm.makeCoffee(0, 10);
		} finally {
			assertEquals(10, money);
		}
	}

	@Test
	public void testPurchaseItemThatDoesntExist() {
		int money = cm.makeCoffee(0, 10);
		assertEquals(10, money);
	}

	@Test
	public void purchaseUsingTextInput() {
		cm.addRecipe(r1);
		assertThrows(NumberFormatException.class, () -> {
			Main m = new Main();
			Class[] parameterType = null;
			//yassssssss
			Method method = Main.class.getDeclaredMethod("recipeListSelection", parameterType); 
			method.setAccessible(true);
			try {
				method.invoke(m, "String");
			} catch (NumberFormatException e) {
				fail("Failed to handle string input");
			}
		});
	}
}
